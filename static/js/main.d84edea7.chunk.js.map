{"version":3,"sources":["images/Evengalism.jpg","images/kids-rccg.jpg","images/logorccg-150x150.png","pages/landing/Home.js","components/Navigation/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","id","src","require","Header","props","useState","display","setDisplay","menuItemHandler","onClick","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kLAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,kCCA3CD,EAAOC,QAAU,IAA0B,8C,0FC+C5BC,G,WA5CH,WACR,OACI,6BACA,6BAASC,UAAU,WACf,yBAAKA,UAAU,WACX,wBAAIA,UAAU,iBAAd,sDACA,uBAAGA,UAAU,gBAAb,cAIR,6BAASC,GAAG,WAAWD,UAAU,WAC7B,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,qBACf,uCACA,qFAGJ,yBAAKA,UAAU,YAAYE,IAAKC,EAAQ,QAI5C,6BAASH,UAAU,IACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,GAAGE,IAAKC,EAAQ,OAE/B,yBAAKH,UAAU,iBAEX,wCACA,gLAMJ,yBAAKA,UAAU,WACR,8CACA,sD,OCLJI,G,MAlCA,SAAAC,GAAQ,IAAD,cACO,QADP,gBAEOC,oBAAS,IAFhB,mBAEfC,EAFe,KAEPC,EAFO,KAUZC,EAAkB,WACpBD,GAAW,IAGf,OACI,4BAAQR,UAAU,WACd,yBAAKA,UAAU,aACf,yBAAKE,IAAKC,EAAQ,MAClB,4BAAQO,QAfU,WAEtBF,GADGD,IAcqCP,UAAU,eAC1C,6BACA,6BACA,8BAEJ,yBAAKA,UAAWO,EAAQ,eAAe,MACvC,4BACI,4BAAI,uBAAGG,QAASD,GAAZ,SACJ,4BAAI,uBAAGC,QAASD,EAAiBE,KAAK,aAAlC,SAAJ,W,MCdDC,MATf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d84edea7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Evengalism.f4794c6d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kids-rccg.d823a892.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logorccg-150x150.a23caa6f.png\";","import React from 'react';\r\nimport './Landing.css'\r\n\r\nconst Home =()=>{\r\n    return(\r\n        <div>\r\n        <section className=\"landing\">\r\n            <div className=\"overlay\">\r\n                <h1 className=\"landing-title\">Welcome to Redeem christian church of God Halmstad</h1>\r\n                <a className=\"visit-button\">Visit Us</a>\r\n                \r\n            </div>\r\n        </section>\r\n        <section id=\"about-us\" className=\"mission\">\r\n            <div className=\"container mission-grid\">\r\n            <div className=\"mission-card left-card\">\r\n                <div className=\"mission-container\">\r\n                <h2>Mission</h2>\r\n                <p>Our mission is to make heaven and take  many with us</p>\r\n                </div>\r\n            </div>\r\n            <img className=\"right-pic\" src={require('../../images/Evengalism.jpg')}/>\r\n            </div>\r\n            \r\n        </section>\r\n        <section className=\"\">\r\n            <div className=\"container kids-flex\">\r\n            <div className=\"block-img\">\r\n            <img className=\"\" src={require('../../images/kids-rccg.jpg')}/>\r\n            </div>\r\n            <div className=\"block-content\">\r\n                \r\n                <h2>Our kids</h2>\r\n                <p>Children are a gift from the Lord;\r\nthey are a reward from him. 127:3. We provide quality Childrenâ€™s programming during our Sunday services</p>\r\n               \r\n            </div>\r\n           \r\n            </div>\r\n            <div className=\"service\">\r\n                   <h2>Sunday service</h2>\r\n                   <p> 11:00am - 01:00pm</p>\r\n                </div>\r\n        </section>\r\n        </div>\r\n    );\r\n}\r\nexport default Home; ","import React, {useState} from 'react';\r\nimport './Header.css'\r\nconst Header = props=>{\r\nconst [displayNav, setNav] = 'false';\r\nconst [display,setDisplay] = useState(false)\r\n    const toggleMenuHandler = ()=>{\r\n        if(display){\r\n        setDisplay(false)\r\n        }else{\r\n            setDisplay(true)\r\n        }\r\n    }\r\n    const menuItemHandler = ()=>{\r\n        setDisplay(false)\r\n       \r\n    }\r\n    return(\r\n        <header className='top-nav'>\r\n            <div className='container'>\r\n            <img src={require('../../images/logorccg-150x150.png')}/>\r\n            <button onClick={toggleMenuHandler} className=\"mobile-menu\">\r\n                <hr></hr>\r\n                <hr></hr>\r\n                <hr></hr>\r\n            </button>\r\n            <nav className={display?\"display-menu\":null}>\r\n            <ul > \r\n                <li><a onClick={menuItemHandler}>Home</a></li>\r\n                <li><a onClick={menuItemHandler} href=\"#about-us\">About</a> </li>\r\n                \r\n            </ul>\r\n            </nav>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\nexport default Header","import React from 'react';\nimport Home from './pages/landing/Home';\nimport Header from './components/Navigation/Header';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}